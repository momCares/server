// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int     @id @default(autoincrement())
  name String
  email String @unique
  password String
  role Role @default(user)
  affiliate Affiliate?
  cart Cart?
  orders Order[]
  addresses Address[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

enum Role {
  admin
  user
}

model Affiliate {
  id    Int     @id @default(autoincrement())
  user_id Int @unique
  user User   @relation(fields: [user_id], references: [id])
  code String
  deduction Int
  status Boolean @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Address {
  id    Int     @id @default(autoincrement())
  title String
  description String @db.Text
  zip_code Int
  province_id Int
  province Province @relation(fields: [province_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  city_id Int
  city City    @relation(fields: [city_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id Int
  user User    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Cart {
  id    Int     @id @default(autoincrement())
  user_id Int @unique
  user User    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  shipping_cost Int?
  address_id Int?
  promo_code String?
  promo_id Int?
  promo Promo?    @relation(fields: [promo_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  total_cost Int?
  deduction_cost Int?
  net_price Int?
  cart_details Cart_Detail[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Order {
  id    Int     @id @default(autoincrement())
  user_id Int
  user User    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  promo_id Int?
  promo Promo?   @relation(fields: [promo_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  courier String
  status Status @default(waiting_payment)
  payment_receipt String?
  shipping_cost Int
  address_id Int
  total_cost Int
  deduction_cost Int
  net_price Int
  order_details Order_Detail[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

enum Status {
  waiting_payment
  payment_verified
  processed
  delivered
  completed
  rejected
}

model Order_Detail {
  id    Int     @id @default(autoincrement())
  order_id Int
  order Order    @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product_id Int
  product Product    @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  quantity Int
  price Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model City {
  id    Int     @id @default(autoincrement())
  name String
  province_id Int
  addresses Address[]
  province Province    @relation(fields: [province_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Province {
  id    Int     @id @default(autoincrement())
  name String
  cities City[]
  addresses Address[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Product {
  id    Int     @id @default(autoincrement())
  name String @unique
  sku String @unique
  slug String @unique
  price Int
  stock Int
  weight Int
  description String @db.Text
  keywords String?
  order_details Order_Detail[]
  product_details Cart_Detail[]
  product_promos Product_Promo[]
  product_images Product_Image[]
  status Boolean @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Cart_Detail {
  id    Int     @id @default(autoincrement())
  cart_id Int
  cart Cart    @relation(fields: [cart_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product_id Int
  product Product    @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  quantity Int
  price Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Category {
  id    Int     @id @default(autoincrement())
  name String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}



model Promo {
  id    Int     @id @default(autoincrement())
  name String
  code String @unique
  all_products Boolean
  deduction Int
  quantity Int
  start_date DateTime?
  end_date DateTime?
  orders Order[]
  cart Cart[]
  product_promos Product_Promo[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Product_Promo {
  id    Int     @id @default(autoincrement())
  product_id Int
  product Product    @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  promo_id Int
  promo Promo    @relation(fields: [promo_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Product_Image {
  id    Int     @id @default(autoincrement())
  product_id Int
  product Product    @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  url String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}
